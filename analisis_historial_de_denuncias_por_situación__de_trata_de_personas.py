# -*- coding: utf-8 -*-
"""Analisis_historial_de_denuncias_por_situación _de_trata_de_personas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IU5vTWiwuP_CXHAPzvD1E_QjtgFHwNJa

Conociendo la problemática sobre denuncias de abusos mediante el reporte obtenido de la pagina del gobierno de Argentina.  

Se analiza una manera de realizar campañas informativas y educativas para disminuir los índices de denuncias, para esto necesitaríamos  agrupar los casos y realizar campañas educativas e informativas.

Según el tipo de etiqueta del caso Ahora bien, analizando la problemática se decide aplicar un algoritmo de clustering y de esta manera proceder a etiquetar cada caso, realizando previamente un análisis exploratorio a los datos estudiados.
"""

import pandas as pd
import numpy as np 
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

df = pd.read_csv("oficinaRESCATE.csv")

df

df.info()

df.isnull().sum()

df["situacion"]= df["situacion"].fillna("Urgencia")#Cambiamos los valores nulos por "Urgencia" en la columna situacion.

grafica1 = df["tema"].value_counts().plot(kind="bar", figsize= (15,5))
plt.title("Tema")

df["tema"]= df["tema"].fillna("Trata")#Cambiamos los valores nulos por "Trata"
df["subtema"]= df["subtema"].fillna("Salud mental")#Cambiamos los valores nulos por "Salud mental"

df["origen"]= df["origen"].str.replace(u"nan","Ciudadano") #Cambiamos los valores nulos por "Ciudadano"

df.isnull().sum()

grafica1 = df["provincia"].value_counts().plot(kind="bar", figsize= (15,5))
plt.title("Provincia")

df["provincia"]= df["provincia"].fillna("Buenos Aires")#Cambiamos los valores nulos por "Buenos Aires"
df["localidad"]= df["localidad"].fillna("Buenos Aires")#Cambiamos los valores nulos por "Buenos Aires"

grafica1 = df["via_ingreso"].value_counts().plot(kind="bar", figsize= (15,5))
plt.title("via_ingreso")

df["via_ingreso"]= df["via_ingreso"].fillna("Línea 145")

df.isnull().sum()

grafica1 = df["consultante_tipo"].value_counts().plot(kind="bar", figsize= (15,5))
plt.title("consultante_tipo")

df["consultante_tipo"]= df["consultante_tipo"].fillna("Consultante")

grafica1 = df["consultante_genero"].value_counts().plot(kind="bar", figsize= (15,5))
plt.title("consultante_genero")

df["consultante_genero"]= df["consultante_genero"].fillna(method = "bfill")

grafica1 = df["consultante_genero"].value_counts().plot(kind="bar", figsize= (15,5))
plt.title("consultante_genero")

grafica1 = df["consultante_edad_aparente"].value_counts().plot(kind="bar", figsize= (15,5))
plt.title("consultante_edad_aparente")

print(df["consultante_edad_aparente"].mean())

df["consultanta_edad_aparente"]= df["consultante_edad_aparente"].fillna("31")

grafica1 = df["consultante_edad_aparente"].value_counts().plot(kind="bar", figsize= (15,5))
plt.title("consultante_edad_aparente")

sns.distplot(df['consultante_edad_aparente'])

df = df.drop(columns = ["fecha_ingreso","nro_registro_interno","hora_ingreso","consultante_nacionalidad","consultante_provincia","consultante_localidad","consultante_como_conocio_la_linea", "consultante_edad_aparente", "provincia_indec_id"])

df.isnull().sum()

df

grafica1 = df["es_anonima"].value_counts().plot(kind="bar", figsize= (15,5))
plt.title("es_anonima")

df["es_anonima"] = df["es_anonima"].replace({"Si":1, "Sí":1, "No":0})

sns.distplot(df['es_anonima'])

df["consultante_genero"] = df["consultante_genero"].replace({"Mujer":1, "Hombre":0, "Mujer cis":1.5,"Varón cis":0.5, "Mujer trans - travesti":1.2,"No sabe / no contesta":3, "Transexual":2, "Transgénero":2.2, "Varón trans": 0.2, "Intersex": 4, "Travesti":0.2, "Transgenero":2.2 })

grafica1 = df["consultante_genero"].value_counts().plot(kind="bar", figsize= (15,5))
plt.title("consultante_genero")

sns.distplot(df['consultante_genero'])

df

df = pd.get_dummies(df[["situacion","origen","tema", "subtema","provincia","localidad","dependencia_alta","via_ingreso","consultante_tipo" ]])

df

wcss = []

for i in range(1, 20):
  kmeans = KMeans(n_clusters= i, max_iter = 300)
  kmeans.fit(df)
  wcss.append(kmeans.inertia_)
plt.plot(range(1,20), wcss)
plt.xlabel("Número de Clusters")
plt.title("METODO DE CODO")

kmeans = KMeans(n_clusters=7).fit(df)
centroids = kmeans.cluster_centers_
labels = kmeans.labels_

centroids

df["lb"]=labels

grafica1 = df["lb"].value_counts().plot(kind="bar", figsize= (15,5))
plt.title("consultante_genero")